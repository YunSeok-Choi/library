name: CI/CD using github actions & docker

# event trigger
# mainÏù¥ÎÇò develop Î∏åÎûúÏπòÏóê pushÍ∞Ä ÎêòÏóàÏùÑ Îïå Ïã§Ìñâ
on:
  push:
    branches: ["main", "develop"]
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      tags:
        description: "Test scenario tags"

permissions:
  contents: write

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          character set server: "utf8"
          mysql database: "mysql"
          mysql user: "${{secrets.MYSQL_USER}}"
          mysql password: "${{secrets.MYSQL_PASSWORD}}"

      # JDK setting - github actionsÏóêÏÑú ÏÇ¨Ïö©Ìï† JDK ÏÑ§Ï†ï (ÌîÑÎ°úÏ†ùÌä∏ÎÇò AWSÏùò java Î≤ÑÏ†ÑÍ≥º Îã¨ÎùºÎèÑ Î¨¥Î∞©)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          fetch-depth: 0

      # ÌôòÍ≤ΩÎ≥Ñ yml ÌååÏùº ÏÉùÏÑ±(1) - application.yml
      - name: make application.yml
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'develop')
        run: |
          cd library
          cd ./src/main/resources # resources Ìè¥ÎçîÎ°ú Ïù¥Îèô
          touch ./application.yml # application.yml ÏÉùÏÑ±
          echo "${{ secrets.YML }}" > ./application.yml # github actionsÏóêÏÑú ÏÑ§Ï†ïÌïú Í∞íÏùÑ application.yml ÌååÏùºÏóê Ïì∞Í∏∞
        shell: bash

      # ÌôòÍ≤ΩÎ≥Ñ yml ÌååÏùº ÏÉùÏÑ±(2) - dev
      - name: make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd library
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash

      # ÌôòÍ≤ΩÎ≥Ñ yml ÌååÏùº ÏÉùÏÑ±(3) - prod
      - name: make application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          cd library
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        shell: bash

      # gradle build test
      - name: Build with Gradle
        run: |
          cd ./library
          chmod +x gradlew
          ./gradlew clean build --no-daemon

      # - name: Debug Test Results
      #   run: |
      #     pwd
      #     ls

      - name: Failure Test
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: "./library/build/test-results/test/TEST-*.xml"

      - name: Test Fail
        if: failure()
        run: exit 1

      # make version tag. if Had a version +1
      - name: Get Previous Version & Generate New Version
        id: get_version
        run: |
          git config --global user.email "${{secrets.USER_EMAIL}}"
          git config --global user.name "${{secrets.USER_NAME}}"

          git fetch --tags

          PREV_VERSION=$(git tag | sort -V | tail -n 1)

          if [[ -z "$PREV_VERSION" ]]; then
            NEW_VERSION="v1.0.0"
          else
            NEW_VERSION="v$(echo $PREV_VERSION | awk -F. '{$NF++; print $0}' OFS=.)"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "üî¢ ÏÉà Î≤ÑÏ†Ñ: $NEW_VERSION"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/library:${NEW_VERSION} .
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/library:latest .

          docker push ${{ secrets.DOCKER_USERNAME }}/library:${NEW_VERSION}
          docker push ${{ secrets.DOCKER_USERNAME }}/library:latest

      # docker build & push to develop
      - name: Docker build & push to dev
        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/library-dev:${NEW_VERSION} .
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/library-dev:latest .

          docker push ${{ secrets.DOCKER_USERNAME }}/library-dev:${NEW_VERSION}
          docker push ${{ secrets.DOCKER_USERNAME }}/library-dev:latest

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_IP }} # EC2 ÌçºÎ∏îÎ¶≠ IPv4 DNS
          username: ubuntu
          port: 22
          key: ${{ secrets.PEM_KEY }}
          script: |
            cd Library
            chmod +x deploy.sh
            sudo ./deploy.sh ${NEW_VERSION}

      ## deploy to develop
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.HOST_IP }} # EC2 ÌçºÎ∏îÎ¶≠ IPv4 DNS
          username: ubuntu
          port: 22
          key: ${{ secrets.PEM_KEY }}
          script: |
            cd Library
            sudo chmod +x deploy.sh
            sudo ./deploy.sh ${NEW_VERSION}
